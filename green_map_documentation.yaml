openapi: 3.0.4
info:
  title: GreenMap API
  description: In this file all the API exposed by our service are documented. The errors are written
               as text instead of "errorCode", which is the real server response, to provide a more
               helpful and intuitive understanding of the possible arising errors.
  version: 2.0.0

servers:
  - url: http://localhost:3000/api/v2/
    description: Server where the GreenMap APIs are hosted

paths:
  /authenticatedUsers:
    get:
      summary: Returns a list of all authenticated users or just the one making the request based on the query parameter "type".
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: query
          name: type
          schema:
            enum: [all, personal]
          required: true
          description: get "all" users (admin only) or just requesting one "personal" (any user)
        - in: query
          name: email
          schema:
            type: string
          description: search for matching  email
          example: "user@example.com"
        - in: query
          name: banned
          schema:
            type: string
          description: search for matching  banned status
          example: "false"
        - in: query
          name: administrator
          schema:
            type: string
          description: search for matching  admin status
          example: "true"
        - in: query
          name: lastReportDate
          schema:
            type: string
            format: date
          description: search for matching last report date
          example: "2025-05-19T15:53:30.784Z"
        - in: query
          name: points
          schema:
            type: integer
          description: \[optional\] search for matching account points
          example: "0"
      responses:
        "200": # status code
          description: A JSON array of AuthenticatedUser objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticatedUser'
                example: # Sample data
                  [
                    { 
                      self: "/authenticatedUsers/abc123",
                      passwordHash: "$2a$10$abcdehashedpw",
                      email: "user1@example.com",
                      banned: false,
                      administrator: true,
                      points: 5,
                      lastReportIssueDate: "2025-05-19T15:53:30.784Z"
                    },
                    {
                      self: "/authenticatedUsers/def456",
                      passwordHash: "fdsoijkfds-1$%kdaAKD",
                      email: "user2@example.com",
                      banned: true,
                      administrator: false,
                      points: 0,
                      lastReportIssueDate: null
                    }
                  ]
        "401":
            description: Unauthorized
            content:
              application/json:
                examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
    post:
      summary: Returns a JWT token if the login is successful.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: "user@example.com"
              password: "securepassword"
      responses:
        "200": # status code
          description: A JSON containing the JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  authToken:
                    type: string
              example: # Sample data
                authToken: "KvNopad-ffoPF+FJgkfjfv"
        "400":
          description: Invalid credentials
          content:
            application/json:
              examples:
                UserNotFound:
                  summary: User not existing
                  value:
                    error: "EMAIL INSERITA INESISTENTE"
                UserBanned:
                  summary: User banned
                  value:
                    error: "UTENTE BANDITO"
                WrongPassword:
                  summary: Wrong user credentials
                  value:
                    error: "PASSWORD ERRATA"
  /authenticatedUsers/{id}:
    delete:
      summary: Delete a user by id (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "abc123"
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
    put:
      summary: Change the ban and admin status of a user (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "6838a30abdf4be08ee44cc80"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                editBan:
                  type: boolean
                editAdmin:
                  type: boolean
            example:
              editBan: true
              editAdmin: false
      responses:
        '200':
          description: User banned
          content:
            application/json:
              example:
                _id: "abc123"
                email: "user@example.com"
                banned: false
                administrator: true
                points: 9
        '400':
          description: Invalid user ID
          content:
            application/json:
              example:
                error: true
                message: "Inserted user id doesn't exist!"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                message: "Database error"
  /registeringUsers:
    get:
      summary: Returns a list of all registering users (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      responses:
        "200": # status code
          description: A JSON array of RegisteringUser objects
          content:
            application/json:
              schema:
                type: object 
                properties:
                    passwordHash:
                      type: string
                    email:
                      type: string
                    verificationCode:
                      type: object 
                      properties:
                        code:
                          type: integer
                        expireDate:
                          type: string
                example: # Sample data
                  self: "/registeringUsers/abc123"
                  passwordHash: "DfajfkajioFUWAopa"
                  email: "example@email.com"
                  verificationCode:
                    code: 123456
                    expireDate: "21/05/2025 23:59:59"
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
    post:
      summary: Register a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: "user@example.com"
              password: "securePassword"
      responses:
        "201":
          description: Registration step succeeded
          headers:
            Location:
              schema:
                type: string
                format: uri
              example: /api/v1/registeringUsers/683c6910806994b7690f8b5d
          content:
            application/json:
              example:
                id: "683c6910806994b7690f8b5d"
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                alreadyRegistering:
                  summary: Email already in process
                  value:
                    error: "already sent request"
                alreadyExisting:
                  summary: Email already exists
                  value:
                    error: "email already existing"
                tooShort:
                  summary: Password too short
                  value:
                    error: "password too short"
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Delete all registering users (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      responses:
        "204":
          description: All registering users deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
  /registeringUsers/{id}/code:
    post:
      summary: Verify the registration code
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the registering user
          schema:
            type: string
          example: "683c6910806994b7690f8b5d"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
            example:
              code: "123456"
      responses:
        "201":
          description: User successfully registered
          headers:
            Location:
              schema:
                type: string
              example: "/v1/authenticatedUsers/683c6910806994b7690f8b5d"
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                wrongCode:
                  summary: Wrong verification code
                  value:
                    error: "wrong code"
                timeExpired:
                  summary: Verification time expired
                  value:
                    error: "time expired"
                notFound:
                  summary: User ID not found
                  value:
                    error: "user not existing"
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /registeringUsers/{id}:
    delete:
      summary: Delete a registering user by ID (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Registering user deleted
          content:
            application/json:
              example:
                _id: "abc123"
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."  
  /reports:
    get:
      summary: Get reports
      description: If the <b>query</b> parameter "position" and "distance" are provided the function will show
                   the reports inside the research area.
                   Else it will retrieve all reports or personal reports based on the <b>query</b> parameter "type". 
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: query
          name: type
          schema:
            type: string
            enum: [all, personal]
          required: true
          description: get "all" reports (admin only) or just report's of requesting user "personal" (any user)
        - in: query
          name: position
          schema:
            type: string
          description: origin where the report search should begin
          example: "45.8147,10.4895"
        - in: query
          name: distance
          schema:
            type: number
          description: maximum distance a report can have from the origin to be returned
      responses:
        "200":
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportResponse'
        "400":
          description: Invalid input or missing query parameter
          content:
            application/json:
              examples:
                invalidCoordinates:
                  summary: Coordinates not valid
                  value:
                    message: "Coordinates not valid!"
                missingParameter:
                  summary: Missing query parameter
                  value:
                    message: "Query parameters missing!"
        "401":
          description: Authentication token missing
          content:
            application/json:
              example:
                message: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                message: "Failed to authenticate token."  
    post:
      summary: Create a new report
      description: Add a new report for the logged-in user
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReport'
      responses:
        "201":
          description: Report created
        "400":
          description: Cooldown not expired or other error
          content:
            application/json:
              examples:
                    TooManyReportsH:
                      summary: Report already sent
                      value:
                        error: "ULTIMO REPORT INVIATO MENO DI 10 ORE FA. RIPROVA FRA: 2 ORE"
                    TooManyReportsM:
                      summary: Report already sent
                      value:
                        error: "ULTIMO REPORT INVIATO MENO DI 10 ORE FA. RIPROVA FRA: 20 MINUTI"
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserBanned:
                    summary: User is not banned
                    value:
                      error: "SEI STATO BANNATO E NON PUOI INVIARE REPORT!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."  
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"

    delete:
      summary: Delete reports of a specific user/all users (admin only) or delete just personal reports
      description: If the <b>query</b> parameter "type" is set to <u>userReports</u> the function will delete all the reports
                   of the user whose id is passed in the body. If the id doesn't match the one of the requester requires administrator.
                   If the <b>query</b> parameter "type" is set to <u>all</u> all reports will be deleted (admin only).
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: query
          name: type
          schema:
            type: string
            enum: [userReports, all]
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        "204":
          description: Report deleted
        "400":
          description: Invalid ID or missing query parameter
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
  /reports/{id}:
    get:
      summary: Get report by ID (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Report found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        "400":
          description: Invalid ID
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 

    put:
      summary: Update report resolution (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resolved:
                  type: boolean
      responses:
        "200":
          description: Report updated
        "400":
          description: Already resolved or invalid ID
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Delete specific report (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          schema:
            type: string
          description: The identifier of the report
          required: true
      responses:
        "204":
          description: Report deleted
        "400":
          description: Invalid ID
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
  /trashcans:
    get:
      summary: Returns a list of all trashcans (admin only)
      parameters: 
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      responses:
        "200": # status code
          description: A JSON array of Trashcan objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrashcanResponse"
              example: # Sample data
                self: "trashcans/681e53e28becaa63065d6115"
                latitude: 46.06146267294853
                longitude: 11.117831247229145
                trashcanType: 2
    post:
      summary: Add a new trashcan (admin only)
      description: Accessible by administrators or in test mode
      parameters: 
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTrashcan"
            example:
              latitude: 45.4642
              longitude: 9.1900
              trashcanType: 3
      responses:
        "201":
          description: Trashcan created
          headers:
            Location:
              schema:
                type: string
              example: "/v1/trashcans/abc123"
        "401":
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"

  /trashcans/{id}:
    delete:
      summary: Delete a trashcan by ID (admin only)
      description: Accessible by administrators or in test mode
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Trashcan deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
    put:
      summary: Update trashcan type (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trashcanType:
                  type: integer
                  minimum: 0
                  maximum: 4
      responses:
        "200":
          description: Trashcan updated
        "400":
          description: Invalid ID
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                  UserNotAdmin:
                    summary: User is not administrator
                    value:
                      error: "Requesting user is not an administrator!"
                  UserNotAuthenticated:
                    summary: User does not have an authentication token
                    value:
                      error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"

  /trashcans/{position}:
    get:
      summary: Retrieve trashcans near a position or the closest of a type
      description: Depending on the query parameters, returns either nearby trashcans or the nearest of a type
      parameters:
        - in: path
          name: position
          required: true
          schema:
            type: string
          description: Coordinates as "lat,lng"
        - in: query
          name: distance
          required: false
          schema:
            type: number
          description: Distance in meters for filtering nearby trashcans
        - in: query
          name: type
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 4
          description: Finds the closest trashcan of the selected type (work only if distance query is null)
      responses:
        "200":
          description: Trashcans found
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/TrashcanResponse"
        "400":
          description: Invalid input or missing query parameter
          content:
            application/json:
              examples:
                invalidCoordinates:
                  summary: Coordinates not valid
                  value:
                    message: "COORDINATES NOT VALID!"
                missingParameter:
                  summary: Missing query parameter
                  value:
                    error: true
                    message: "NON E' STATO PASSATO UN QUERY PARAMETER PREVISTO ALLA FUNZIONE!"
        "404":
          description: No matching trashcan found
  /questionnaires:
    get:
      summary: Returns a new set of questions to compile if successful
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      responses:
        "200":
          description: Questionnaire available
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/QuestionResponse"
        "400":
          description: No available questions
          content:
            application/json:
              examples:
                outOfQuestions:
                  summary: No available questions
                  value:
                    message: "You have answered all the questions available!"
        '401':
          description: Authentication token missing
          content:
            application/json:
              example:
                error: true
                message: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
    post:
      summary: Submits the answers and rewards the user if successful
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/NewAnswer'
            example:
                answers:
                  [
                    {
                      questionId: "6833420d9fed0793799c69ee",
                      answer: "I would place more trashcans around the city",
                      gibberishLevel: 0.5,
                    }
                  ]
      responses:
        "201":
          description: Answers submitted
        "400":
          description: Last questionnaire compilation time is less than 24 hours
          content:
            application/json:
              examples:
                outOfQuestions:
                  summary: Submitting too early
                  value:
                    message: "You have sumbitted a questionnaire less than 24 hours ago. Try again later!"
        '401':
          description: Authentication token missing or user not found
          content:
            application/json:
                examples:
                  authTokenMissing:
                    summary: Authentication token missing
                    value:
                      message: "Authentication token missing"
                  userNotFound:
                    summary: User not found
                    value:
                      message: "Requesting user not found!"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /questionnaires/answers:
    get:
      summary: Returns all the answers submitted by the users or sends them to the requester's email based on the query parameter "method" (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: query
          name: method
          schema:
            enum: [browser, email]
          description: authentication token
          required: true
      responses:
        "200":
          description: Answers retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/QuestionWithAnswerResponse"
                    example: 
                      self: "/questionnaires/answers/68333c96fac44bf38c4f91ce"
                      question: "What would you do to improve the city of trento?"
                      questionType: 3
                      options: [ "Yes", "No" ]
                      answers: [ 3, 2 ]
                      openAnswers: null
                      answerCount: 5
        "400":
          description: Missing query parameter
          content:
            application/json:
              examples:
                missingQueryParameter:
                  summary: Missing query parameter
                  value:
                    error: true
                    message: "NON E' STATO PASSATO UN QUERY PARAMETER PREVISTO ALLA FUNZIONE!"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
    delete:
      summary: Deletes all the answers to the questionnaires (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
      responses:
        "204":
          description: All answers deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
  /questionnaires/questions:
    get:
      summary: Returns all the questions available for the questionnaires (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      responses:
        "200":
          description: Questions retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/QuestionResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
                
    post:
      summary: Adds a new question for the questionnaires (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/NewQuestion'
              example:
                question:
                  {
                    question: "question",
                    questionType: 2,
                    options: null,
                  }
      responses:
        "201":
          description: Question created 
          content:
            application/json:
              example:
                id: "68333c96fac44bf38c4f91ce"
        "400":
          description: Missing question or question options invalid
          content:
            application/json:
              examples:
                missingQuestion:
                  summary: Missing question
                  value:
                    message: "You have to submit a question!"
                invalidOptions:
                  summary: Invalid question options
                  value:
                    message: "You have to put at least 1 answer option!"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /questionnaires/answers/{questionId}:
    get:
      summary: Returns all the answers given to a certain question (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
        - in: path
          name: questionId
          schema:
            type: string
          description: id of the question you are searching the answers for
          required: true
      responses:
        "200":
          description: Answers of question retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/AnswerResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
  /questionnaires/answers/{issuerId}:
    delete:
      summary: Deletes all the answers submitted by a specific user (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
        - in: path
          name: issuerId
          schema:
            type: string
          description: id of the user you want to remove the answers from
          required: true
      responses:
        "204":
          description: Answers of user deleted successfully 
        "400":
          description: User id not found
          content:
            application/json:
              example:
                message: "The specified user id is invalid!"  
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
  /questionnaires/questions/{questionId}:
    put:
      summary: Updates a question selected by it's id (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
        - in: path
          name: questionId
          schema:
            type: string
          description: id of the question you are updating
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/NewQuestion'
              example:
                question:
                  {
                    question: "question",
                    questionType: 2,
                    options: null,
                  }
      responses:
        "200":
          description: Question updated successfully
        "400":
          description: Missing question or question options invalid
          content:
            application/json:
              examples:
                missingQuestion:
                  summary: Missing question
                  value:
                    message: "You have to submit a question!"
                invalidOptions:
                  summary: Invalid question options
                  value:
                    message: "You have to put at least 1 answer option!"      
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    delete:
      summary: Deletes a question selected by it's id (admin only)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
        - in: path
          name: questionId
          schema:
            type: string
          description: id of the question you are deleting
          required: true
      responses:
        "204":
          description: Question deleted successfully 
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token." 
        "500":
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
  /discounts:
    get:
      summary: Get discounts (all, personal, or new)
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
        - in: query
          name: type
          schema:
            type: string
            enum: [all, personal, new]
          required: true
        - in: query
          name: amount
          schema:
            type: number
        - in: query
          name: isPercentage
          schema:
            type: boolean
        - in: query
          name: discountType
          schema:
            type: string
      responses:
        '200':
          description: List of discounts
          content:
            application/json:
              example:
                - self: /discounts/64a7fc90b4a3e8bdbb90a1f0
                  discountType: Steam
                  amount: 10
                  isPercentage: true
                  code: "##################"
        '201':
          description: Discount successfully redeemed
        '400':
          description: Missing query parameters or out of stock
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
        '500':
          description: Server error
          content:
            application/json:
              example:
                message: "Internal server error"
    post:
      summary: Create a new discount
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discountType:
                  type: string
                amount:
                  type: number
                isPercentage:
                  type: boolean
                code:
                  type: string
      responses:
        '201':
          description: Discount created
        '400':
          description: Wrong data
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."
    delete:
      summary: Delete all user-redeemed discounts
      responses:
        '204':
          description: Discounts deleted
  /discounts/{id}:
    delete:
      summary: Delete a discount by ID
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          description: authentication token
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Discount deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                UserNotAdmin:
                  summary: User is not administrator
                  value:
                    error: "Requesting user is not an administrator!"
                UserNotAuthenticated:
                  summary: User does not have an authentication token
                  value:
                    error: "Authentication token missing"
        '403':
          description: Failed to authenticate token
          content:
            application/json:
              example:
                error: true
                message: "Failed to authenticate token."

components:
  schemas:
    AuthenticatedUser: 
      type: object
      properties:
        passwordHash:
          type: string
        email:
          type: string
        banned:
          type: boolean
        administrator:
          type: boolean
        points:
          type: integer
        lastReportIssueDate:
          type: string
          format: date
        lastQuestionnaireCompilationDate:
          type: string
          format: date
        isSystem:
          type: boolean
  
    NewReport:
      type: object
      required:
        - type
        - description
        - latitude
        - longitude
      properties:
        type:
          type: integer
          minimum: 0
          maximum: 3
        description:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    Report:
      type: object
      properties:
        _id:
          type: string
        issuerId:
          type: string
        reportType:
          type: integer
          minimum: 0
          maximum: 3
        reportDescription:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        resolved:
          type: boolean

    ReportResponse:
      type: object
      properties:
        self:
          type: string
        issuerId:
          type: string
        reportType:
          type: integer
          minimum: 0
          maximum: 3
        reportDescription:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        resolved:
          type: boolean
        
    NewTrashcan:
      type: object
      required:
        - latitude
        - longitude
        - trashcanType
      properties:
        latitude:
          type: number
        longitude:
          type: number
        trashcanType:
          type: integer
          minimum: 0
          maximum: 4
            
        
    TrashcanResponse:
      type: object
      properties:
        self:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        trashcanType:
          type: integer
          minimum: 0
          maximum: 4

    QuestionResponse:
      type: object
      properties:
        self:
          type: string
        question:
          type: string
        questionType:
          type: integer
          minimum: 0
          maximum: 3
        options:
          type: array
          items:
            type: string

    NewQuestion:
      type: object
      properties:
        question:
          type: string
        questionType:
          type: integer
          minimum: 0
          maximum: 3
        options:
          type: array
          items:
            type: string

    QuestionWithAnswerResponse:
      type: object
      properties:
        self:
          type: string
        question:
          type: string
        questionType:
          type: integer
          minimum: 0
          maximum: 3
        options:
          type: array
          items:
            type: string
        answers:
          type: array
          items:
            type: string
        openAnswers:
          type: array
          items:
            $ref: "#/components/schemas/AnswerResponse"
        answerCount:
          type: integer
          minimum: 0
          
    AnswerResponse:
      type: object
      properties:
        self:
          type: string
        submitterId:
          type: string
        questionId:
          type: string
        answer:
          type: string
        gibberishLevel:
          type: number

    NewAnswer:
      type: object
      properties:
        questionId:
          type: string
        answer:
          type: string
        gibberishLevel:
          type: number
    